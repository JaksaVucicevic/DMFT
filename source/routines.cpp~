#include "routines.h"
#include "GRID.h"
#include <vector>
#include <omp.h>

using namespace std;

double sign(double x)
{ //returns 1 if x positive, -1 if x negative, 0 if x=0
  if (x == 0.0) return 0;
  else return (x >= 0.0) ? +1.0 : -1.0; 
}

double sqr(double x)
{ //returns square of x
  return x*x;
} 

int pow(int base, int exp)
{
  int res = 1;
  for (int i=0; i<exp; i++)
    res *= base;
  return res;
}

complex<double> sqr(complex<double> x)
{
 return x*x;
}

/*double abs(double x)
{
  return (x>=0) ? x : -x; 
}*/

/*double abs(complex<double> x)
{
  return  sqrt(   sqr( real(x) ) 
                + sqr( imag(x) ) ); 
}*/

void PrintFunc3D(const char* FileName, int N, complex<double>** Y, double* X)          
{ 
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<N; i+=20)
    for (int j=0; j<N; j+=20)
      fprintf(f,"%.15le %.15le %.15le %.15le\n", X[i], X[j], real(Y[i][j]), imag(Y[i][j]));
  fclose(f);
}

void PrintFunc(const char* FileName, int N, int M, double** Y, double* X)
{ 
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<N; i++)   
  { 
    fprintf(f, "%.15le", X[i]);
    for (int j=0; j<M; j++)
    { 
       // loop through and store the numbers into the file
       fprintf(f, "%.15le", Y[i][j] );
    }
   fprintf(f, "\n");
  }
  fclose(f);
}

void PrintFunc(const char* FileName, int N, complex<double>* Y, double* X)          
{ 
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<N; i++)
    fprintf(f,"%.15le %.15le %.15le\n", X[i], real(Y[i]), imag(Y[i]));
  fclose(f);
}

void PrintFunc(const char* FileName, int N, complex<double>* Y)
{  
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<N; i++)
    fprintf(f,"%d %.15le %.15le\n", i, real(Y[i]), imag(Y[i]));
  fclose(f);
}

void PrintFunc(const char* FileName, int N, double* Y)
{
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<N; i++)
    fprintf(f,"%d %.15le \n", i, Y[i]);
  fclose(f);
}


void PrintFunc(const char* FileName, int N, double* Y, double* X)
{ 
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<N; i++)  
    fprintf(f,"%.15le %.15le\n", X[i], Y[i]);
  fclose(f);
}

void PrintFunc(const char* FileName, std::vector< complex<double> > Y, std::vector<double> X)          
{ 
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<X.size(); i++)
    fprintf(f,"%.15le %.15le %.15le\n", X[i], real(Y[i]), imag(Y[i]));
  fclose(f);
}

void GetDimensions(const char* FileName, int &N, int &M)
{
 //----open file---//
  FILE *f;
  f = fopen(FileName, "r");
  if (f==NULL) perror ("Error opening file");
    
  //----count rows----//
  int i=0;
  char str[1000];
  while (!feof(f))
  {
    fgets ( str, 1000, f );
    i++;
  }
  N=i-1;

  //----count columns---//
  i=1;
  int j=0;
  while (str[i] != '\0')
  {  if ((str[i]!=' ')and(str[i-1]==' ')) j++;
     i++;
  }                     
  M=j+1;
                            
  //---close file-----//
  fclose(f);
}
                              
void ReadFunc(const char* FileName, int &N, int &M, double** &X)
{
 GetDimensions(FileName, N, M);
 printf("N: %d M: %d\n", N, M);

 X = new double*[M];
 for (int i=0; i<M; i++)
   X[i] = new double[N];

 FILE *f;
 f = fopen(FileName, "r");

 for (int i=0; i<N; i++)
   for (int j=0; j<M; j++)
   { double Dummy;
     fscanf(f, "%le", &Dummy);
     X[j][i]=Dummy;
   }
 fclose(f);
 printf("uchito fajl");
}
//---------------- vectors and matrices--------------------//

void MultiplyByMatrix(int N, double* v, double** m)
{
  double* res = new double[N];
  for (int j=0; j<N; j++)
  { res[j] = 0;
    for (int i=0; i<N; i++)
      res[j] += m[i][j]*v[i]; 
  }
  for (int i=0; i<N; i++) v[i] = res[i];
  delete [] res;
}

void CreateRotationMatrix(double** m, int N, double angle, int* plane)
{
  for (int i=0; i<N; i++)
    for (int j=0; j<N; j++) 
      if (i==j) m[i][j] = 1.0;
      else m[i][j] = 0.0;
  m[plane[0]][plane[0]] = cos(angle);
  m[plane[1]][plane[1]] = cos(angle);
  m[plane[0]][plane[1]] = sin(angle);
  m[plane[1]][plane[0]] = -sin(angle);
}

void RotateVector(int N, double* v, double angle, int* plane)
{ 
  double** RotationMatrix = new double*[N];  
  for (int i=0; i<N; i++)
    RotationMatrix[i] = new double[N];
  CreateRotationMatrix(RotationMatrix, N, angle, plane);
  MultiplyByMatrix(N, v, RotationMatrix);
  for (int i=0; i<N; i++) delete [] RotationMatrix[i];
  delete [] RotationMatrix;
}

void RotateVector2D(double* v, double angle)
{
  RotateVector(2, v, angle, (int []){0,1} );
}


                                
//------------------ integral routine ---------------------//

double TrapezIntegralMP(int N, double Y[], double X[])
{
#ifdef _OMP
 
  double sum = 0.0;
  sum += Y[0]*(X[1]-X[0]) + Y[N-1]*(X[N-1]-X[N-2]);
  int Nt;
  double* psum = new double[8];
  #pragma omp parallel shared(psum)
  { Nt = omp_get_num_threads();
    int tid = omp_get_thread_num();
    psum[tid] = 0; 
    for (int i=tid+1; i<N-1; i+=Nt)
      psum[tid]+=Y[i]*(X[i+1]-X[i-1]);
    //printf("inside proc %d, psum = %le\n",tid,psum[tid]);
  }
  for (int i = 0; i<Nt; i++) 
  {  sum += psum[i];
     //printf("outside proc %d, psum = %le\n",i,psum[i]);
  }
  delete [] psum;
  return sum*0.5;

#else

  return TrapezIntegral(N,Y,X);

#endif
}

complex<double> TrapezIntegralMP(int N, complex<double> Y[], double X[])
{

#ifdef _OMP
  
  complex<double> sum = 0.0;
  sum += Y[0]*(X[1]-X[0]) + Y[N-1]*(X[N-1]-X[N-2]);
  int Nt;
  complex<double>* psum = new complex<double>[8];
  #pragma omp parallel shared(psum)
  { Nt = omp_get_num_threads();
    int tid = omp_get_thread_num();
    psum[tid] = 0; 
    for (int i=tid+1; i<N-1; i+=Nt)
      psum[tid]+=Y[i]*(X[i+1]-X[i-1]);
  }
  for (int i = 0; i<Nt; i++) sum += psum[i];
  delete [] psum;
  return sum*0.5;

#else

  return TrapezIntegral(N,Y,X);

#endif

}

double TrapezIntegral(int N, double Y[], double X[])
{
  double sum = 0.0;
  sum += Y[0]*(X[1]-X[0]) + Y[N-1]*(X[N-1]-X[N-2]);
  for (int i=1; i<N-1; i++)
    sum+=Y[i]*(X[i+1]-X[i-1]);
  return sum*0.5;
}
/*
double TrapezIntegral(std::vector<double> Y, std::vector<double> X)
{
  double sum = 0.0;
  int N = Y.size();
  sum += Y[0]*(X[1]-X[0]) + Y[N-1]*(X[N-1]-X[N-2]);
  for (int i=1; i<N-1; i++)
    sum+=Y[i]*(X[i+1]-X[i-1]);
  return sum*0.5;
}
*/
complex<double> TrapezIntegral(std::vector< complex<double> > Y, std::vector<double> X)
{
  complex<double> sum = 0.0;
  int N = Y.size();
  sum += Y[0]*complex<double>(X[1]-X[0]) + 
         Y[N-1]*complex<double>(X[N-1]-X[N-2]);
  
  for (int i=1; i<N-1; i++)
    sum+=Y[i]*complex<double>(X[i+1]-X[i-1]);
  
  return sum*complex<double>(0.5);
}

complex<double> TrapezIntegral(int N, complex<double> Y[], double X[])
{
  complex<double> sum = 0.0;
  sum += Y[0]*complex<double>(X[1]-X[0]) + 
         Y[N-1]*complex<double>(X[N-1]-X[N-2]);
  
  for (int i=1; i<N-1; i++)
    sum+=Y[i]*complex<double>(X[i+1]-X[i-1]);
  
  return sum*complex<double>(0.5);
}

double EllipticIntegralFirstKind(double x)
{ //integration goes from 0 to 1
  //split integration interval
  int Nlog=1000;
  int Nlin=1000;
  int N = Nlog+Nlin;
  double* omega = new double[N];
  GRID grid(Nlog,Nlin,1.0,1.0e-1,1.0e-6);
  grid.assign_omega(omega);

  double* integrand = new double[N];  
  for (int i=N/2; i<N; i++) integrand[i] = 0;
  for (int i=0; i<N/2; i++) integrand[i] = 1.0 / sqrt( (1-sqr(omega[i]+1.0))*(1-sqr((omega[i]+1.0)*x))  );
  
  double res = TrapezIntegral(N,integrand,omega);
  delete [] integrand;
  delete [] omega;
  return res;
}

complex<double> EllipticIntegralFirstKind(complex<double> x)
{ //integration goes from 0 to 1
  //split integration interval
  int Nlog=3000;
  int Nlin=3000;
  int N = Nlog+Nlin;
  double* omega = new double[N];
  GRID grid(Nlog,Nlin,1.0,1.0e-1,1.0e-14);
  grid.assign_omega(omega);

  complex<double>* integrand = new complex<double>[N];  
  for (int i=N/2; i<N; i++) integrand[i] = 0;
  for (int i=0; i<N/2; i++) integrand[i] = 1.0 / (sqrt( complex<double> ( (1.0 - sqr(omega[i]+1.0))
                                                                              * ( 1.0 - sqr((omega[i]+1.0)*x) )
                                                                         )
                                                       )
                                                  );
//  /*char FN[50];
//  sprintf(FN,"elliptic.x%.3f",real(x));
//  PrintFunc(FN,N, integrand, omega);
  complex<double> res = TrapezIntegral(N,integrand,omega);
  delete [] integrand;
  delete [] omega;
  grid.~GRID();
  return res;
}

//------Sine Integral, from Num Recipes -----//

double SI(double x)
{ 
  //--------consts----------//
  double EPS = 3.0e-16;
  double EULER = 0.577215664901533;
  int MAXIT = 100;
  double PIBY2 = 1.570796326794897;
  double FPMIN = 1.0e-30;
  double TMIN = 2.0;
  complex<double> ONE =  complex<double>(1.0,0.0);
  //--------vars-------------//
  double si;
  int i,k,odd;
  double a,err,fact,sign,sum,sumc,sums,t,term;
  complex<double> h,b,c,d,del;
  t=fabs(x);
                                           // Special case.
  if (t == 0.0) {
      si=0.0;
//      *ci = -1.0/FPMIN;
//      return si;
  }
                                            //Evaluate continued fraction by modified
  if (t > TMIN) {
                                               // Lentz’s method (§5.2).
      b=complex<double>(1.0,t);
      c=complex<double>(1.0/FPMIN,0.0);
      d=h=ONE/b;
      for (i=2;i<=MAXIT;i++) {
          a = -(i-1)*(i-1);
          b+=complex<double>(2.0,0.0);
                                            //Denominators cannot be zero.
          d=ONE/( complex<double>(a,0)*d +b );
          c=b+complex<double>(a,0.0)/c;
          del=c*d;
          h=h*del;
          if (fabs(real(del)-1.0)+fabs(imag(del)) < EPS) break;
      }
      if (i > MAXIT) printf("cf failed in cisi\n");
      h=complex<double>(cos(t),-sin(t))*h;
//      *ci = -real(h);
      si=PIBY2+imag(h);
                                            //Evaluate both series simultaneously.
  } else {
                                            //Special case: avoid failure of convergence
      if (t < sqrt(FPMIN)) {
                                               // test because of underflow.
          sumc=0.0;
          sums=t;
      } else {
          sum=sums=sumc=0.0;
          sign=fact=1.0;
          odd=1;
          for (k=1;k<=MAXIT;k++) {
              fact *= t/k;
              term=fact/k;
              sum += sign*term;
              err=term/fabs(sum);
              if (odd) {
                  sign = -sign;
                  sums=sum;
                  sum=sumc;
              } else {
                  sumc=sum;
                  sum=sums;
              }
              if (err < EPS) break;
              odd=!odd;
          }
          if (k > MAXIT) printf("maxits exceeded in cisi\n");
      }
      si=sums;
//      *ci=sumc+log(t)+EULER;
  }
  if (x < 0.0) si = -(si);
  return si;
}


//-------------------- DOSes and Init Deltas -----------------//

double DOS(int DOStype, double t, double om)
{ 
  switch (DOStype)
  {
    case DOStypes::SemiCircle: 
            if ( sqr(2*t)<sqr(om) )
              return 0.0;
            else 
              return sqrt( sqr(2*t)-sqr(om) ) 
                     / ( 2*pi*sqr(t) ); 
            break;
    case DOStypes::Gaussian: 
            { 
              double d = 1/(2*t*sqrt(pi))*exp( -sqr( om )/( 4*sqr(t) ) ); 
              return (d>0.001) ? d : 0;
            }
            break;
    case DOStypes::Insulator:
           {
            double a=-2.5, b =2.5;
            if ( sqr(2*t)<sqr(om-a) and sqr(2*t)<sqr(om-b))
                return 0.0;
            else 
              if (sqr(2*t)>sqr(om-a))
                return sqrt( sqr(2*t)-sqr(om-a) )
                       / ( 4*pi*sqr(t) );
              else
                return sqrt( sqr(2*t)-sqr(om-b) )
                       / ( 4*pi*sqr(t) );                                                                                
           } break;     
    case DOStypes::SquareLattice:
           { if (om==0.0) return 100.00;
             if (abs(om)>=4*t) return 0.0;
             else return 1.0 / (sqr(pi)*2*t) 
                         * EllipticIntegralFirstKind( sqrt( 1.0-sqr(om/(4*t))) );
           }  break;  
    case DOStypes::CubicLattice:           
           {  if (abs(om)>=6*t) return 0.0;
              int N = 6000;
              double* omega = new double[N];
              GRID grid(0, N, 3.141, 0.0, 0.0);
              grid.assign_omega(omega);
              double* d = new double[N];
              for (int i=0; i<N/2; i++) d[i]=0;
              for (int i=N/2; i<N; i++)
              {  complex<double> f = 4.0 * t / ( om - 2 * t * cos(omega[i]) + complex<double>(0.0, 0.001) );
                 //if (f>1.0)
                   d[i] = imag( f * EllipticIntegralFirstKind( f ) );
                 //else d[i]=0;
                 //if (om<1.0) printf("omega %.3f: f=%.3f\n",om,f);
              }
              /*if (om<1.0)
              {  char FN[50];
                 sprintf(FN,"integrand.w%.3f",om);              
                 PrintFunc(FN,N,d,omega);
              }*/

              double Res = -1.0/pi * TrapezIntegral(N,d,omega);
              delete [] d;
              delete [] omega;
              grid.~GRID();
              return 1.0 / (2 * sqr(pi) * t) 
                     * Res;          
           }  break;
    //Add here different DOS types!!! 
    default: { printf("DOStype %d not implemented!", DOStype); exit(1); }
  }
}

void WriteCubicDosToFile()
{ 
  int N = 3000;
  double* omega = new double[N];
  double* dos = new double[N];
  GRID grid(0, N, 3.5, 0.0, 0.0);
  grid.assign_omega(omega);
  for(int i=N/2; i<N; i++)
  { dos[i] = DOS(DOStypes::CubicLattice, 0.5, omega[i]);
    dos[N-1-i]=dos[i];  
    printf("Write2File: omega %.3f: %.3f\n", omega[i], dos[i]); 
  }
  PrintFunc("CubicLatticeDOS",N,dos,omega);
  delete [] dos;
  delete [] omega;
}

void ReadDosFromFile(const char* FN, int N, double* omega, double* DOS)
{
  int n,m;
  double** dos;
  ReadFunc(FN, n, m, dos);
  for (int i = 0; i<N; i++)
    DOS[i] = interpl(n, dos[1], dos[0], omega[i]);
  for (int i=0; i<m; i++)
    delete [] dos[i];
  delete [] dos;
}

double interpl(int N, double* Y, double* X, double x)
{
  if ((x < X[0])or(x > X[N-1])) return 0;
  else
  { int i;
    for (i = 0; i < N; i++)
      if (X[i]>x) break;
    return Y[i-1] + (Y[i]-Y[i-1]) / (X[i]-X[i-1]) 
                                  * (x-X[i-1]);
  }    
} 

//------------------------------------------------------------------------------//

complex<double> LS_get_G(int DOStype, double t, complex<double> com)
{
  complex<double> root = sqrt ( sqr(com)  - 4.0 * sqr(t) );
  double sgn = sign(imag(root));
  return ( com - sgn*root) / ( 2.0 * sqr(t) ) ;
}

void InitG(int DOStype, double t, int N, double* omega, complex<double>* G)
{
  complex<double>* comega = new  complex<double>[N];
  for (int i=0; i<N; i++) comega[i] = omega[i];
  InitG(DOStype, t, N, comega, G);
  delete [] comega;
}

void InitG(int DOStype, double t, int N, complex<double>* omega, complex<double>* G)
{
  switch (DOStype)
  {
     case DOStypes::SemiCircle:     
       for (int i = 0; i<N; i++)
         G[i] = LS_get_G(DOStype, t, omega[i]) ;
       break;     
     default: printf("routines::InitG: NOT IMPLEMENTED!!!");
  }
}



void InitDOS(int DOStype, double t, int N, double* omega, double* dos)
{
  for (int i=0; i<N; i++) dos[i] = DOS(DOStype, t, omega[i]);
}

void InitDelta(int DOStype, 
               int N, 
               double V, 
               double mu, 
               double eta, 
               double t,
               double* omega,  
               complex<double>* Delta,
               const char* FNDos)
{  
  printf("-- INFO -- routines: Making Delta: t=%.3f\n",t);
  // prepare dos
  
//------------------Get DOS----------------------//
  double* dos = new double[N];


// TODO : THIS NEEDS TO BE FIXED

//  if (FNDos=="")
    for(int i=0; i<N; i++)
      dos[i] = DOS(DOStype, t, omega[i]);
//  else
//    ReadDosFromFile(FNDos, N, omega, dos);

  //PrintFunc("InitDelta.DOS",N,dos,omega);
  
//-----------------------------------------------//
  for (int i=1; i<N-1; i++)
  {  
    //treat integrand carefully
    double D = 0.0;
    complex<double> LogTerm = 0.0;
    D = dos[i];

    LogTerm =  ((i==0)or(i==N-1)) ? 0.0 
                                  : complex<double>(D, 0.0) * log( complex<double> ( (mu + omega[i] + omega[N-1])
                                                                                    /(mu + omega[i] - omega[N-1]) ) );
    //printf("LogTerm(%.3f) = %.3f, %.3f\n",omega[i], real(LogTerm),imag(LogTerm));
    //create integrand array
    complex<double>* d = new complex<double>[N];
    for (int j=0; j<N; j++)
    {  d[j] = (i==j) ? 0.0 : complex<double>(dos[j] - D, 0.0) 
                            / complex<double>( mu + omega[i] - omega[j] ); 
       //if (i==j) printf("d(i=j) = %.3f, %.3f\n", real(d[j]), imag(d[j]) );
    }
      
    //integrate to get G 
    Delta[i] = conj( sqr(V)*(TrapezIntegral(N, d,omega) + LogTerm) ) ; 
    delete [] d; 
  }
  Delta[0] = Delta[1];
  Delta[N-1] = Delta[N-2];
  //PrintFunc("DeltaMade",N,Delta,omega);

//---------------------------------------------------------------------------//

  delete [] dos;
  printf("-- INFO -- routines: Intgral Delta: %.6f\n", imag(TrapezIntegral(N,Delta,omega)));
}

void InitDeltaFromSIAMOutputFile(const char* FN, int N, double* omega, complex<double>* Delta)
{
  int n,m;
  double** output;
  ReadFunc(FN, n, m, output);
  for (int i = 0; i<N; i++)
    Delta[i] = complex<double>( interpl(n, output[2], output[0], omega[i]), 
                              interpl(n, output[3], output[0], omega[i]) );
  for (int i=0; i<m; i++)
    delete [] output[i];
  delete [] output;
}

void InitInsulatorDelta(double U,
                        int N, 
                        double t,  
                        double* omega,
                        complex<double>* Delta)
{ printf("Making insulator Delta from Hubbar I approx: U=%.3f, t=%.3f\n",U,t);
  for (int i=0; i<N; i++)
  { 
    double Gat = 0.5 * ( 1.0/(omega[i] + U/2.0) + 1.0/(omega[i] - U/2.0) );
    complex<double> Sqr = sqrt( complex<double>(1.0)/sqr(Gat)  - 4.0*sqr(t) );
    complex<double> G = (1.0/Gat + real(Sqr) < 0) ? (1.0/Gat + conj(Sqr) ) / (2*sqr(t))
                                                  : (1.0/Gat - Sqr ) / (2*sqr(t));
    Delta[i] = sqr(t)*G;
  }
  PrintFunc("initdelta",N,Delta,omega);
   printf("Intgral Delta: %.6f", imag(TrapezIntegral(N,Delta,omega)));
}

//-----------------------------------------------------------------------------//

void InitArrays(int N, double*** a, const int* Ns)
{
  for (int i=0; i<N; i++)
    a[i][0] = new double[Ns[i]];  
}

void InitArrays(int N, double*** a, const int* Ns, double (**func)(int))
{
  for (int i=0; i<N; i++)
  {   a[i][0] = new double[Ns[i]];  
      if (func[i]!=NULL)
        for (int j=0; j<Ns[i]; j++) 
        {  a[i][0][j]=func[i](j);
           printf("j: %d a: %f\n",j,a[i][0][j]);
        }
  }
}
      
void ReleaseMemory(int N, double*** a)
{
  for (int i=0; i<N; i++)
    delete [] a[i][0];
     
}




